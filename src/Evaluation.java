public class Evaluation {
	private static final int[][][] Pawn = {

			{

					{ 0, 0, 0, 0, 0, 0, 0, 0 },

					{ 5, 10, 10, -20, -20, 10, 10, 5 },

					{ 5, -5, -10, 0, 0, -10, -5, 5 },

					{ 0, 0, 0, 20, 20, 0, 0, 0 },

					{ 5, 5, 10, 25, 25, 10, 5, 5 },

					{ 10, 10, 20, 30, 30, 20, 10, 10 },

					{ 50, 50, 50, 50, 50, 50, 50, 50 },

					{ 0, 0, 0, 0, 0, 0, 0, 0 }

			}, {

					{ 0, 0, 0, 0, 0, 0, 0, 0 },

					{ 50, 50, 50, 50, 50, 50, 50, 50 },

					{ 10, 10, 20, 30, 30, 20, 10, 10 },

					{ 5, 5, 10, 25, 25, 10, 5, 5 },

					{ 0, 0, 0, 20, 20, 0, 0, 0 },

					{ 5, -5, -10, 0, 0, -10, -5, 5 },

					{ 5, 10, 10, -20, -20, 10, 10, 5 },

					{ 0, 0, 0, 0, 0, 0, 0, 0 }

			}

	};

	private static final int[][][] Knight = {

			{

					{ -50, -40, -30, -30, -30, -30, -40, -50 },

					{ -40, -20, 0, 5, 5, 0, -20, -40 },

					{ -30, 5, 10, 15, 15, 10, 5, -30 },

					{ -30, 0, 15, 20, 20, 15, 0, -30 },

					{ -30, 5, 15, 20, 20, 15, 5, -30 },

					{ -30, 0, 10, 15, 15, 10, 0, -30 },

					{ -40, -20, 0, 0, 0, 0, -20, -40 },

					{ -50, -40, -30, -30, -30, -30, -40, -50 }

			}, {

					{ -50, -40, -30, -30, -30, -30, -40, -50 },

					{ -40, -20, 0, 0, 0, 0, -20, -40 },

					{ -30, 0, 10, 15, 15, 10, 0, -30 },

					{ -30, 5, 15, 20, 20, 15, 5, -30 },

					{ -30, 0, 15, 20, 20, 15, 0, -30 },

					{ -30, 5, 10, 15, 15, 10, 5, -30 },

					{ -40, -20, 0, 5, 5, 0, -20, -40 },

					{ -50, -40, -30, -30, -30, -30, -40, -50 }

			}

	};

	private static final int[][][] Bishop = {

			{

					{ -20, -10, -10, -10, -10, -10, -10, -20 },

					{ -10, 5, 0, 0, 0, 0, 5, -10 },

					{ -10, 10, 10, 10, 10, 10, 10, -10 },

					{ -10, 0, 10, 10, 10, 10, 0, -10 },

					{ -10, 5, 5, 10, 10, 5, 5, -10 },

					{ -10, 0, 5, 10, 10, 5, 0, -10 },

					{ -10, 0, 0, 0, 0, 0, 0, -10 },

					{ -20, -10, -10, -10, -10, -10, -10, -20 }

			}, {

					{ -20, -10, -10, -10, -10, -10, -10, -20 },

					{ -10, 0, 0, 0, 0, 0, 0, -10 },

					{ -10, 0, 5, 10, 10, 5, 0, -10 },

					{ -10, 5, 5, 10, 10, 5, 5, -10 },

					{ -10, 0, 10, 10, 10, 10, 0, -10 },

					{ -10, 10, 10, 10, 10, 10, 10, -10 },

					{ -10, 5, 0, 0, 0, 0, 5, -10 },

					{ -20, -10, -10, -10, -10, -10, -10, -20 }

			}

	};

	private static final int[][][] Rook = {

			{

					{ 0, 0, 0, 5, 5, 0, 0, 0 },

					{ -5, 0, 0, 0, 0, 0, 0, -5 },

					{ -5, 0, 0, 0, 0, 0, 0, -5 },

					{ -5, 0, 0, 0, 0, 0, 0, -5 },

					{ -5, 0, 0, 0, 0, 0, 0, -5 },

					{ -5, 0, 0, 0, 0, 0, 0, -5 },

					{ 5, 10, 10, 10, 10, 10, 10, 5 },

					{ 0, 0, 0, 5, 5, 0, 0, 0 }

			}, {

					{ 0, 0, 0, 0, 0, 0, 0, 0 },

					{ 5, 10, 10, 10, 10, 10, 10, 5 },

					{ -5, 0, 0, 0, 0, 0, 0, -5 },

					{ -5, 0, 0, 0, 0, 0, 0, -5 },

					{ -5, 0, 0, 0, 0, 0, 0, -5 },

					{ -5, 0, 0, 0, 0, 0, 0, -5 },

					{ -5, 0, 0, 0, 0, 0, 0, -5 },

					{ 0, 0, 0, 5, 5, 0, 0, 0 }

			}

	};

	private static final int[][][] Queen = {

			{

					{ -20, -10, -10, -5, -5, -10, -10, -20 },

					{ -10, 0, 5, 0, 0, 0, 0, -10 },

					{ -10, 5, 5, 5, 5, 5, 0, -10 },

					{ 0, 0, 5, 5, 5, 5, 0, -5 },

					{ -5, 0, 5, 5, 5, 5, 0, -5 },

					{ -10, 0, 5, 5, 5, 5, 0, -10 },

					{ -10, 0, 0, 0, 0, 0, 0, -10 },

					{ -20, -10, -10, -5, -5, -10, -10, -20 }

			}, {

					{ -20, -10, -10, -5, -5, -10, -10, -20 },

					{ -10, 0, 0, 0, 0, 0, 0, -10 },

					{ -10, 0, 5, 5, 5, 5, 0, -10 },

					{ -5, 0, 5, 5, 5, 5, 0, -5 },

					{ 0, 0, 5, 5, 5, 5, 0, -5 },

					{ -10, 5, 5, 5, 5, 5, 0, -10 },

					{ -10, 0, 5, 0, 0, 0, 0, -10 },

					{ -20, -10, -10, -5, -5, -10, -10, -20 }

			}

	};

	private static final int[][][] King = {

			{

					{ 20, 30, 10, 0, 0, 10, 30, 20 },

					{ 20, 20, 0, 0, 0, 0, 20, 20 },

					{ -10, -20, -20, -20, -20, -20, -20, -10 },

					{ -20, -30, -30, -40, -40, -30, -30, -20 },

					{ -30, -40, -40, -50, -50, -40, -40, -30 },

					{ -30, -40, -40, -50, -50, -40, -40, -30 },

					{ -30, -40, -40, -50, -50, -40, -40, -30 },

					{ -30, -40, -40, -50, -50, -40, -40, -30 }

			}, {

					{ -30, -40, -40, -50, -50, -40, -40, -30 },

					{ -30, -40, -40, -50, -50, -40, -40, -30 },

					{ -30, -40, -40, -50, -50, -40, -40, -30 },

					{ -30, -40, -40, -50, -50, -40, -40, -30 },

					{ -20, -30, -30, -40, -40, -30, -30, -20 },

					{ -10, -20, -20, -20, -20, -20, -20, -10 },

					{ 20, 20, 0, 0, 0, 0, 20, 20 },

					{ 20, 30, 10, 0, 0, 10, 30, 20 }

			}

	};

	public static int Best(Case[][] echiquier, boolean W) {
		int WhiteScore = 0;
		int BlackScore = 0;
		for (int i = 0; i < 8; i++) {
			for (int j = 0; j < 8; j++) {
				if (echiquier[i][j].isOccupe() == 'p' || echiquier[i][j].isOccupe() == 'c'
						|| echiquier[i][j].isOccupe() == 't' || echiquier[i][j].isOccupe() == 'f'
						|| echiquier[i][j].isOccupe() == 'd' || echiquier[i][j].isOccupe() == 'r') {

					// BlackScore+=echiquier[i][j].valeurCase();
					switch (echiquier[i][j].isOccupe()) {

					case 'p':
						BlackScore += Pawn[0][i][j] * echiquier[i][j].valeurCase();

					case 'c':
						BlackScore += Knight[0][i][j] * echiquier[i][j].valeurCase();

					case 'f':
						BlackScore += Bishop[0][i][j] * echiquier[i][j].valeurCase();

					case 't':
						BlackScore += Rook[0][i][j] * echiquier[i][j].valeurCase();

					case 'd':
						BlackScore += Queen[0][i][j] * echiquier[i][j].valeurCase();

					case 'r':
						BlackScore += King[0][i][j] * echiquier[i][j].valeurCase();

					default:
						break;

					}
				} else {

					// WhiteScore+=echiquier[i][j].valeurCase();
					switch (echiquier[i][j].isOccupe()) {

					case 'P':
						WhiteScore += Pawn[1][i][j] * echiquier[i][j].valeurCase();

					case 'C':
						WhiteScore += Knight[1][i][j] * echiquier[i][j].valeurCase();

					case 'F':
						WhiteScore += Bishop[1][i][j] * echiquier[i][j].valeurCase();

					case 'T':
						WhiteScore += Rook[1][i][j] * echiquier[i][j].valeurCase();

					case 'D':
						WhiteScore += Queen[1][i][j] * echiquier[i][j].valeurCase();

					case 'R':
						WhiteScore += King[1][i][j] * echiquier[i][j].valeurCase();

					default:
						break;

					}
				}
			}
		}
		if (W) {
			return WhiteScore - BlackScore;
		} else {
			return BlackScore - WhiteScore;
		}
	}

}